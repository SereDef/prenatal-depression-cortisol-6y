# Load datasets
depcor <- readRDS(paste(pathtodata, 'dataset_raw.rds', sep = ""))
# white participants only
white <- depcor[depcor$childRaceEth == 0, ]
N <- nrow(depcor) # total sample N
NODEP <- summary(as.factor(depcor$bsiScoreFlg))[1] # N controls
DEP <- summary(as.factor(depcor$bsiScoreFlg))[2] # N cases
wN <- nrow(white) # total sample N
wNODEP <- summary(as.factor(white$bsiScoreFlg))[1] # N controls
wDEP <- summary(as.factor(white$bsiScoreFlg))[2] # N cases
cat(paste("FULL\nOverall:   ", N,
"\nBSI < 0.75:", NODEP,
"\nBSI > 0.75:", DEP ))
cat(paste("WHITE\nOverall:   ", wN,
"\nBSI < 0.75:", wNODEP,
"\nBSI > 0.75:", wDEP ))
# ------------------------------------------------------------------------------
# compute mean and standard deviation of entire sample and in cases vs controls
meansd <- function(var, splitvar = depcor$bsiScoreFlg) {
totm <- format(round(mean(var, na.rm = T), 1), nsmall = 1)
tots <- format(round(sd(var, na.rm = T), 2), nsmall = 2)
splitm <- format(round(tapply(var, splitvar, mean, na.rm = T), 1), nsmall = 1)
splits <- format(round(tapply(var, splitvar, sd, na.rm = T), 2), nsmall = 2)
cat(paste("Overall:    ", totm, " (± ", tots, ")",
"\nBSI < 0.75: ", splitm[1], " (± ", splits[1], ")",
"\nBSI > 0.75: ", splitm[2], " (± ", splits[2], ")", sep = ""))
}
# ------------------------------------------------------------------------------
# compute n and percent of entire sample and in cases vs controls for binary variables
npercent <- function(var, splitvar = depcor$bsiScoreFlg) {
ns <- summary(as.factor(var));
prc0 = round((ns[1]/N)*100, 1); prc1 = round((ns[2]/N)*100, 1);
spt <- split(var, splitvar)
depns <- summary(as.factor(spt$`1`))
depprc0 = round((depns[1]/DEP)*100, 1); depprc1 = round((depns[2]/DEP)*100, 1);
nodns <- summary(as.factor(spt$`0`))
nodepprc0 = round((nodns[1]/NODEP)*100, 1); nodepprc1 = round((nodns[2]/NODEP)*100, 1);
cat(paste("Overall:    ", ns[1], " (", prc0, "%)  ",  ns[2], " (", prc1, "%)",
"\nBSI < 0.75: ", depns[1], " (", depprc0, "%)  ",  depns[2], " (", depprc1, "%)",
"\nBSI > 0.75: ", nodns[1], " (", nodepprc0, "%)  ",  nodns[2], " (", nodepprc1, "%)",
sep = ""))
}
# ------------------------------------------------------------------------------
# compute n and percent of entire sample and in cases vs controls for variables with 3 lvls
npercent3 <- function(var, splitvar = depcor$bsiScoreFlg) {
ns <- summary(as.factor(var));
prc0 = round((ns[1]/N)*100, 1); prc1 = round((ns[2]/N)*100, 1); prc2 = round((ns[3]/N)*100, 1);
spt <- split(var, splitvar)
depns <- summary(as.factor(spt$`1`))
depprc0 = round((depns[1]/DEP)*100, 1); depprc1 = round((depns[2]/DEP)*100, 1); depprc2 = round((depns[3]/DEP)*100, 1);
nodns <- summary(as.factor(spt$`0`))
nodepprc0 = round((nodns[1]/NODEP)*100, 1); nodepprc1 = round((nodns[2]/NODEP)*100, 1); nodepprc2 = round((nodns[3]/NODEP)*100, 1);
cat(paste("Overall:    ", ns[1], " (", prc0, "%)  ",  ns[2], " (", prc1, "%)  ", ns[3], " (", prc2, "%)",
"\nBSI < 0.75: ", depns[1], " (", depprc0, "%)  ",  depns[2], " (", depprc1, "%)  ",  depns[3], " (", depprc2, "%)",
"\nBSI > 0.75: ", nodns[1], " (", nodepprc0, "%)  ",  nodns[2], " (", nodepprc1, "%)  ", nodns[3], " (", nodepprc2, "%)",
sep = ""))
}
meansd(depcor$maternalAge)
meansd(depcor$prePregBMI)
npercent(depcor$maternalEdu)
npercent3(depcor$maternalSmoking)
npercent(depcor$maternalMaritalStatus)
npercent(depcor$maternalIncome)
npercent(depcor$sex)
npercent(depcor$childRaceEth)
meansd(depcor$gestAge)
meansd(depcor$familySS)
meansd(depcor$childAge)
meansd(depcor$lncortisol)
meansd(depcor$cortisol)
summary(depcor$cortisol)
# Point to the necessary libraries
library(foreign)
library(car)
# check if the path to the data is already in memory, otherwise ask for it.
if (exists("pathtodata") == F) { pathtodata = readline(prompt="Enter path to data: ") } # -> CUSTOMIZE TO APPROPRIATE PATH
# read in data quickly
readquick <- function(filename, rootdir = pathtodata, exclude_col = "") { # only works for SPSS files
dat <- read.spss(paste(rootdir, filename, sep=""),
use.value.labels = F, to.data.frame = T)
# Get rid of all capital letters in column names (so you don't have to worry)
names(dat) <- tolower(names(dat))
# Replace values of 777, 888 or 999 with NAs unless they are IDCs or IDMs
# If you do not want this to happen for any other column use the exclude_col argument.
for (i in 1:length(dat)) {
if (colnames(dat)[i] == "idm" | colnames(dat)[i] == "idc" | colnames(dat)[i] == exclude_col) {
dat[,i] <- dat[,i]
} else {
dat[,i] <- ifelse(dat[,i] == 777 | dat[,i] == 888 | dat[,i] == 999, NA, dat[,i]) }
}
return(dat)
}
#-------------------------------------------------------------------------------
# General functioning of the family was measured with the family assessment device (FAD).
# This function calculates FAD scores accounting for (max 25%) missing values and
# dichotomizes the scores according to the cutoff for unhealthy family functioning
# provided by the manual (Byles et al., 1988), = 2.17.
fad_scores <- function(set, dich = FALSE){
fadtotal <- rowSums(abs(set)) # Sum items
no_na_fad <- rowSums(!is.na(set)) # Number of endorsed items
# Compute mean score + do not calculate when more than 25% of items are missing
fad_score <- ifelse(no_na_fad >= 9, yes = fadtotal/no_na_fad, no = NA)
if (dich == T) { fad_score <- ifelse(fad_score > 2.17, yes = 1, no = 0) }
return(fad_score)
}
#-------------------------------------------------------------------------------
# This will come in handy for exclusion
'%notin%' <- Negate('%in%')
# Read in the datasets
pre_bsi <- readquick("GR1003-BSI D1_22112016.sav") # 9778 obs. of 261 vars
hair <- readquick("CORTISOLHAIRF5_08062015.sav") # 6690 obs. of 35 vars
demogr <- readquick("CHILD-ALLGENERALDATA_07072020.sav") # 9901 obs. of 112 vars
smokingv1 <- readquick("MATERNALSMOKING_22112016.sav") #  9778 obs of 11 vars
# drinkingv1 <- readquick("GEDRAGSGROEP_MaternalDrinking_22112016.sav") # excluded from analysis because not available in PV
social <- readquick("GR1003-Family Assessment Device J1-J12_22112016.sav")
# Depressive symptoms were assessed at about 20.6 weeks of gestation with the
# Brief Symptom Inventory (BSI); a validated self‐report questionnaire defining a
# spectrum of psychiatric symptoms. We use the 6‐item depressive symptoms scale (total scores).
# No more than one missing item was allowed to minimize selective non-response.
# Internal consistency for the depression scale: α = .80.
# Mothers with a score higher than 0.75 have clinically relevant depressive symptoms
# according to the Dutch manual.
predep <- data.frame(pre_bsi$idm,
pre_bsi$dep, # min: 0 ; max: 4
ifelse(pre_bsi$dep > 0.75, yes = 1, no = 0)) # 1 = depression; 0 = no depression
View(pre_bsi)
View(pre_bsi)
View(social)
View(social)
View(demogr)
View(demogr)
haircort <- data.frame(hair$idc, hair$agechildyf5,
hair$hair_cortisol_pgmg,
log(hair$hair_cortisol_pgmg))
colnames(haircort) <- c("idc", "childAge", "cortisol", "lncortisol")
child_general = demogr[,c( 'idc', 'idm',
'gender',    # child sex
'ethnfv2',   # ethnicity original variable
'educm',     # highest education finished (mother, during pregnancy)
'income5',   # net income of household when the child is 5.
'twin',      # used for exclusion criteria
'mother',    # mother id used to identify siblings (for exclusion)
'parity',    # parity (used for imputation)
'gestbir',   # gestational age at birth (used for imputation)
'bmi_0',     # maternal BMI (self-reported), before pregnancy
'mardich',   # marital status during pregnancy
'age_m_v2')] # maternal age at intake (used for imputation)
# Again, let's try to keep it user friendly
colnames(child_general)[c(10:11, 13)] = c("gestAge", "prePregBMI", "maternalAge")
# Ethnicity recode – dichotomized into: western and non-western;
child_general$childRaceEth <- ifelse(child_general$ethnfv2 == 1 | child_general$ethnfv2 == 300 |
child_general$ethnfv2 == 500 | child_general$ethnfv2 >= 700,
# Dutch (1), American, western (300) Asian, western (500) European (700), Oceanie (800)
yes = 0, # White
no = 1) # Non-white
# Indonesian (2), Cape Verdian (3), Maroccan (4) Dutch Antilles (5) Surinamese
# (6) Turkish (7) African (200), American, non western (400), Asian, non western (600)
# Sex recode 0 = boy, 1 = girl
child_general$sex <- child_general$gender - 1
# Marital status recode 0 = no partner 1 = married or cohabiting
child_general$maternalMaritalStatus <- recode(child_general$mardich, '1=1; 2=0')
# Maternal education recode
# DICH: "No education"/"Primary"/"Secondary-phase 1"/"Secondary-phase 2" = 0 "Higher-phase 1"/"Higher-phase 2" = 1.
# based on Centraal Bureau voor de Statistiek (2016).
child_general$maternalEdu <- ifelse(child_general$educm <= 3, yes = 0, no = 1)
# Income recode
# DICH: according to the Central Statistic Netherlands (2013).
# Net household income below 1600 €/month (basic needs level) = risk.
child_general$maternalIncome <- ifelse(child_general$income5 < 4, yes = 0, no = 1)
smoking <- data.frame(smokingv1$idm,
smokingv1$smoke_all - 1) # recode: 0 = never a smoker;
# (1) smoked until pregnancy was known (i.e., first trimester only);
# (2) continued smoking during pregnancy.
colnames(smoking) <- c('idm', "maternalSmoking")
# Recode items so higher scores reflect more social support
fad <- data.frame(social$j0100103,
social$j0300103,
social$j0500103,
social$j0700103,
social$j0900103,
social$j1100103,
5 - social$j0200103, # Recode inverse item
5 - social$j0400103, # Recode inverse item
5 - social$j0600103, # Recode inverse item
5 - social$j0800103, # Recode inverse item
5 - social$j1000103, # Recode inverse item
5 - social$j1200103) # Recode inverse item
social$familySS <- fad_scores(fad)
################################################################################
# Merge all variables together
depre_covs <- Reduce(function(x,y) merge(x = x, y = y, by = "idm",  all.x = TRUE),
list(predep, child_general, smoking, social))
full_dataset = merge(depre_covs, haircort, by = "idc" , all.x = TRUE)
# read in data quickly
readquick <- function(filename, rootdir = pathtodata, exclude_col = "") { # only works for SPSS files
dat <- read.spss(paste(rootdir, filename, sep=""),
use.value.labels = F, to.data.frame = T)
# Get rid of all capital letters in column names (so you don't have to worry)
names(dat) <- tolower(names(dat))
# Replace values of 777, 888 or 999 with NAs unless they are IDCs or IDMs
# If you do not want this to happen for any other column use the exclude_col argument.
for (i in 1:length(dat)) {
if (colnames(dat)[i] == "idm" | colnames(dat)[i] == "idc" | colnames(dat)[i] == exclude_col) {
dat[,i] <- dat[,i]
} else {
dat[,i] <- ifelse(dat[,i] == 777 | dat[,i] == 888 | dat[,i] == 999, NA, dat[,i]) }
}
return(dat)
}
#-------------------------------------------------------------------------------
# General functioning of the family was measured with the family assessment device (FAD).
# This function calculates FAD scores accounting for (max 25%) missing values and
# dichotomizes the scores according to the cutoff for unhealthy family functioning
# provided by the manual (Byles et al., 1988), = 2.17.
fad_scores <- function(set, dich = FALSE){
fadtotal <- rowSums(abs(set)) # Sum items
no_na_fad <- rowSums(!is.na(set)) # Number of endorsed items
# Compute mean score + do not calculate when more than 25% of items are missing
fad_score <- ifelse(no_na_fad >= 9, yes = fadtotal/no_na_fad, no = NA)
if (dich == T) { fad_score <- ifelse(fad_score > 2.17, yes = 1, no = 0) }
return(fad_score)
}
#-------------------------------------------------------------------------------
# This will come in handy for exclusion
'%notin%' <- Negate('%in%')
# Read in the datasets
pre_bsi <- readquick("GR1003-BSI D1_22112016.sav") # 9778 obs. of 261 vars
hair <- readquick("CORTISOLHAIRF5_08062015.sav") # 6690 obs. of 35 vars
demogr <- readquick("CHILD-ALLGENERALDATA_07072020.sav") # 9901 obs. of 112 vars
smokingv1 <- readquick("MATERNALSMOKING_22112016.sav") #  9778 obs of 11 vars
# drinkingv1 <- readquick("GEDRAGSGROEP_MaternalDrinking_22112016.sav") # excluded from analysis because not available in PV
social <- readquick("GR1003-Family Assessment Device J1-J12_22112016.sav")
# Depressive symptoms were assessed at about 20.6 weeks of gestation with the
# Brief Symptom Inventory (BSI); a validated self‐report questionnaire defining a
# spectrum of psychiatric symptoms. We use the 6‐item depressive symptoms scale (total scores).
# No more than one missing item was allowed to minimize selective non-response.
# Internal consistency for the depression scale: α = .80.
# Mothers with a score higher than 0.75 have clinically relevant depressive symptoms
# according to the Dutch manual.
predep <- data.frame(pre_bsi$idm,
pre_bsi$dep, # min: 0 ; max: 4
ifelse(pre_bsi$dep > 0.75, yes = 1, no = 0)) # 1 = depression; 0 = no depression
colnames(predep) <- c("idm", "bsiScore", "bsiScoreFlg")
haircort <- data.frame(hair$idc, hair$agechildyf5,
hair$hair_cortisol_pgmg,
log(hair$hair_cortisol_pgmg))
colnames(haircort) <- c("idc", "childAge", "cortisol", "lncortisol")
child_general = demogr[,c( 'idc', 'idm',
'gender',    # child sex
'ethnfv2',   # ethnicity original variable
'educm',     # highest education finished (mother, during pregnancy)
'income5',   # net income of household when the child is 5.
'twin',      # used for exclusion criteria
'mother',    # mother id used to identify siblings (for exclusion)
'parity',    # parity (used for imputation)
'gestbir',   # gestational age at birth (used for imputation)
'bmi_0',     # maternal BMI (self-reported), before pregnancy
'mardich',   # marital status during pregnancy
'age_m_v2')] # maternal age at intake (used for imputation)
# Again, let's try to keep it user friendly
colnames(child_general)[c(10:11, 13)] = c("gestAge", "prePregBMI", "maternalAge")
# Ethnicity recode – dichotomized into: western and non-western;
child_general$childRaceEth <- ifelse(child_general$ethnfv2 == 1 | child_general$ethnfv2 == 300 |
child_general$ethnfv2 == 500 | child_general$ethnfv2 >= 700,
# Dutch (1), American, western (300) Asian, western (500) European (700), Oceanie (800)
yes = 0, # White
no = 1) # Non-white
# Indonesian (2), Cape Verdian (3), Maroccan (4) Dutch Antilles (5) Surinamese
# (6) Turkish (7) African (200), American, non western (400), Asian, non western (600)
# Sex recode 0 = boy, 1 = girl
child_general$sex <- child_general$gender - 1
# Marital status recode 0 = no partner 1 = married or cohabiting
child_general$maternalMaritalStatus <- recode(child_general$mardich, '1=1; 2=0')
# Maternal education recode
# DICH: "No education"/"Primary"/"Secondary-phase 1"/"Secondary-phase 2" = 0 "Higher-phase 1"/"Higher-phase 2" = 1.
# based on Centraal Bureau voor de Statistiek (2016).
child_general$maternalEdu <- ifelse(child_general$educm <= 3, yes = 0, no = 1)
# Income recode
# DICH: according to the Central Statistic Netherlands (2013).
# Net household income below 1600 €/month (basic needs level) = risk.
child_general$maternalIncome <- ifelse(child_general$income5 < 4, yes = 0, no = 1)
smoking <- data.frame(smokingv1$idm,
smokingv1$smoke_all - 1) # recode: 0 = never a smoker;
# (1) smoked until pregnancy was known (i.e., first trimester only);
# (2) continued smoking during pregnancy.
colnames(smoking) <- c('idm', "maternalSmoking")
# Recode items so higher scores reflect more social support
fad <- data.frame(social$j0100103,
social$j0300103,
social$j0500103,
social$j0700103,
social$j0900103,
social$j1100103,
5 - social$j0200103, # Recode inverse item
5 - social$j0400103, # Recode inverse item
5 - social$j0600103, # Recode inverse item
5 - social$j0800103, # Recode inverse item
5 - social$j1000103, # Recode inverse item
5 - social$j1200103) # Recode inverse item
social$familySS <- fad_scores(fad)
################################################################################
# Merge all variables together
depre_covs <- Reduce(function(x,y) merge(x = x, y = y, by = "idm",  all.x = TRUE),
list(predep, child_general, smoking, social))
full_dataset = merge(depre_covs, haircort, by = "idc" , all.x = TRUE)
initial_sample <- 9901
## First exclusion step: Exclude children with missing cortisol
outcome_meas <- full_dataset[!is.na(full_dataset$cortisol),]
after_cort <- nrow(outcome_meas)
sub1 <- after_cort - initial_sample
# Exclude participants with missing ethnicity values
ethn_present <- outcome_meas[!is.na(outcome_meas$childRaceEth),]
after_ethn <- nrow(ethn_present)
sub2 <- after_ethn - after_cort
# Exclude twins
no_twins <- ethn_present[ethn_present$twin == 0, ]
after_twins <- nrow(no_twins)
sub3 <- after_twins - after_ethn
# Select only one sibling (based on data availability or randomly).
# First, I determine a list of mothers that have more than one child in the set.
# NOTE: duplicated() is the best option I could find to determine which mother IDs
# recur more than once (very non-elegant, tbh, but using table() gets even uglier)
siblings_id = data.frame(no_twins$mother[duplicated(no_twins$mother)])
# duplicated() funtion does not allow to ignore NAs so I remove them manually.
# I also transform the numeric vector into a dataframe because of indexing problems.
siblings_id = siblings_id[!is.na(siblings_id),]; siblings_id = data.frame(siblings_id);
# Second, I create an empty vector to fill with the IDC of the sibling(s) with more
# missing items or with a randomly picked sibling in case they have the same nr of missing.
worse_sibling = rep(NA, dim(siblings_id)[1] + 1) # I will need the "+1" for triplets!
# Loop through the mother IDs I previously identified and link them to IDCs
for (i in 1:dim(siblings_id)[1]) {
siblings = no_twins[no_twins$mother == siblings_id[i,1], ] # identify the couples of siblings
# For some reason when I run the line above 2 rows of NAs are created too, go figure.
# Let's get rid of them:
siblings = siblings[rowSums(is.na(siblings)) != ncol(siblings), ]
# There is one mother with 3 siblings, let's select the "best" one and get rid of the other two
if (dim(siblings)[1] > 2) {
nmiss = c( sum(is.na(siblings[1,])), sum(is.na(siblings[2,])), sum(is.na(siblings[3,])) )
if (which.min(nmiss) == 1) { worse_sibling[i] = siblings[2,'idc']
worse_sibling[dim(siblings_id)[1] + 1] = siblings[3,'idc']
} else if (which.min(nmiss) == 2) { worse_sibling[i] = siblings[1,'idc']
worse_sibling[dim(siblings_id)[1] + 1] = siblings[3,'idc']
} else { worse_sibling[i] = siblings[1,'idc']
worse_sibling[dim(siblings_id)[1] + 1] = siblings[2,'idc'] }
}
# otherwise, select the "worse" sibling (with more missing) and add to it the the black list
if ( sum(is.na(siblings[1,])) > sum(is.na(siblings[2,])) ) {
worse_sibling[i] = siblings[1,'idc']
} else if ( sum(is.na(siblings[1,])) == sum(is.na(siblings[2,])) ) {
worse_sibling[i] = siblings[sample(1:2, 1),'idc']
} else { worse_sibling[i] = siblings[2,'idc'] }
}
# Now we are finally ready to exclude siblings
final <- no_twins[no_twins$idc %notin% worse_sibling, ]
after_siblings <- nrow(final)
sub4 <- after_siblings - after_twins
# Flowchart
flowchart <- list(initial_sample, sub1, after_cort, sub2, after_ethn, sub3, after_twins, sub4, after_siblings)
cat(paste("Well, congrats! Your final dataset includes", after_siblings ,"participants.")) # 2877
full_dataset$childRaceEth
summary(full_dataset$childRaceEth)
summary(as.factor(full_dataset$childRaceEth))
initial_sample <- nrow(full_dataset[full_dataset$childRaceEth == 0,])
white only = full_dataset[full_dataset$childRaceEth == 0,]
white_only = full_dataset[full_dataset$childRaceEth == 0,]
initial_sample <- nrow(white_only)
View(hair)
View(hair)
summary(as.factor(hair$visitchildf5))
summary(as.factor(demogr$visitchildf5))
View(demogr)
View(demogr)
summary(as.factor(demogr$visit5))
ummary(as.factor(hair$hair_cortisol_pgmg))
summary(as.factor(hair$hair_cortisol_pgmg))
summary(hair$hair_cortisol_pgmg))
summary(hair$hair_cortisol_pgmg)
child_general = demogr[,c( 'idc', 'idm',
'gender',    # child sex
'ethnfv2',   # ethnicity original variable
'educm',     # highest education finished (mother, during pregnancy)
'income5',   # net income of household when the child is 5.
'twin',      # used for exclusion criteria
'mother',    # mother id used to identify siblings (for exclusion)
'parity',    # parity (used for imputation)
'gestbir',   # gestational age at birth (used for imputation)
'bmi_0',     # maternal BMI (self-reported), before pregnancy
'mardich',   # marital status during pregnancy
'age_m_v2',  # maternal age at intake (used for imputation)
'visit5')]   # for selection
# Again, let's try to keep it user friendly
colnames(child_general)[c(10:11, 13)] = c("gestAge", "prePregBMI", "maternalAge")
# Ethnicity recode – dichotomized into: western and non-western;
child_general$childRaceEth <- ifelse(child_general$ethnfv2 == 1 | child_general$ethnfv2 == 300 |
child_general$ethnfv2 == 500 | child_general$ethnfv2 >= 700,
# Dutch (1), American, western (300) Asian, western (500) European (700), Oceanie (800)
yes = 0, # White
no = 1) # Non-white
# Indonesian (2), Cape Verdian (3), Maroccan (4) Dutch Antilles (5) Surinamese
# (6) Turkish (7) African (200), American, non western (400), Asian, non western (600)
# Sex recode 0 = boy, 1 = girl
child_general$sex <- child_general$gender - 1
# Marital status recode 0 = no partner 1 = married or cohabiting
child_general$maternalMaritalStatus <- recode(child_general$mardich, '1=1; 2=0')
# Maternal education recode
# DICH: "No education"/"Primary"/"Secondary-phase 1"/"Secondary-phase 2" = 0 "Higher-phase 1"/"Higher-phase 2" = 1.
# based on Centraal Bureau voor de Statistiek (2016).
child_general$maternalEdu <- ifelse(child_general$educm <= 3, yes = 0, no = 1)
# Income recode
# DICH: according to the Central Statistic Netherlands (2013).
# Net household income below 1600 €/month (basic needs level) = risk.
child_general$maternalIncome <- ifelse(child_general$income5 < 4, yes = 0, no = 1)
smoking <- data.frame(smokingv1$idm,
smokingv1$smoke_all - 1) # recode: 0 = never a smoker;
# (1) smoked until pregnancy was known (i.e., first trimester only);
# (2) continued smoking during pregnancy.
colnames(smoking) <- c('idm', "maternalSmoking")
# Recode items so higher scores reflect more social support
fad <- data.frame(social$j0100103,
social$j0300103,
social$j0500103,
social$j0700103,
social$j0900103,
social$j1100103,
5 - social$j0200103, # Recode inverse item
5 - social$j0400103, # Recode inverse item
5 - social$j0600103, # Recode inverse item
5 - social$j0800103, # Recode inverse item
5 - social$j1000103, # Recode inverse item
5 - social$j1200103) # Recode inverse item
social$familySS <- fad_scores(fad)
################################################################################
# Merge all variables together
depre_covs <- Reduce(function(x,y) merge(x = x, y = y, by = "idm",  all.x = TRUE),
list(predep, child_general, smoking, social))
full_dataset = merge(depre_covs, haircort, by = "idc" , all.x = TRUE)
# only white eligible participants
white_only = full_dataset[full_dataset$childRaceEth == 0,]
initial_sample <- nrow(white_only)
summary(as.factor(white_only$visit5))
## First exclusion step: exclude childen who did not come to visit
visit <- white_only[!is.na(white_only$visit5),]
after_visit <- nrow(visit)
sub1 <- after_visit - initial_sample
## Second exclusion step: Exclude children with missing cortisol
outcome_meas <- after_visit[!is.na(after_visit$cortisol),]
## Second exclusion step: Exclude children with missing cortisol
outcome_meas <- visit[!is.na(visit$cortisol),]
after_cort <- nrow(outcome_meas)
sub1 <- after_cort - after_visit
# only white eligible participants
white_only = full_dataset[full_dataset$childRaceEth == 0,]
initial_sample <- nrow(white_only)
## First exclusion step: exclude childen who did not come to visit
visit <- white_only[!is.na(white_only$visit5),]
after_visit <- nrow(visit)
sub1 <- after_visit - initial_sample
## Second exclusion step: Exclude children with missing cortisol
outcome_meas <- visit[!is.na(visit$cortisol),]
after_cort <- nrow(outcome_meas)
sub2 <- after_cort - after_visit
# Exclude twins
no_twins <- outcome_meas[outcome_meas$twin == 0, ]
after_twins <- nrow(no_twins)
sub3 <- after_twins - after_cort
# Select only one sibling (based on data availability or randomly).
# First, I determine a list of mothers that have more than one child in the set.
# NOTE: duplicated() is the best option I could find to determine which mother IDs
# recur more than once (very non-elegant, tbh, but using table() gets even uglier)
siblings_id = data.frame(no_twins$mother[duplicated(no_twins$mother)])
# duplicated() funtion does not allow to ignore NAs so I remove them manually.
# I also transform the numeric vector into a dataframe because of indexing problems.
siblings_id = siblings_id[!is.na(siblings_id),]; siblings_id = data.frame(siblings_id);
# Second, I create an empty vector to fill with the IDC of the sibling(s) with more
# missing items or with a randomly picked sibling in case they have the same nr of missing.
worse_sibling = rep(NA, dim(siblings_id)[1] + 1) # I will need the "+1" for triplets!
# Loop through the mother IDs I previously identified and link them to IDCs
for (i in 1:dim(siblings_id)[1]) {
siblings = no_twins[no_twins$mother == siblings_id[i,1], ] # identify the couples of siblings
# For some reason when I run the line above 2 rows of NAs are created too, go figure.
# Let's get rid of them:
siblings = siblings[rowSums(is.na(siblings)) != ncol(siblings), ]
# There is one mother with 3 siblings, let's select the "best" one and get rid of the other two
if (dim(siblings)[1] > 2) {
nmiss = c( sum(is.na(siblings[1,])), sum(is.na(siblings[2,])), sum(is.na(siblings[3,])) )
if (which.min(nmiss) == 1) { worse_sibling[i] = siblings[2,'idc']
worse_sibling[dim(siblings_id)[1] + 1] = siblings[3,'idc']
} else if (which.min(nmiss) == 2) { worse_sibling[i] = siblings[1,'idc']
worse_sibling[dim(siblings_id)[1] + 1] = siblings[3,'idc']
} else { worse_sibling[i] = siblings[1,'idc']
worse_sibling[dim(siblings_id)[1] + 1] = siblings[2,'idc'] }
}
# otherwise, select the "worse" sibling (with more missing) and add to it the the black list
if ( sum(is.na(siblings[1,])) > sum(is.na(siblings[2,])) ) {
worse_sibling[i] = siblings[1,'idc']
} else if ( sum(is.na(siblings[1,])) == sum(is.na(siblings[2,])) ) {
worse_sibling[i] = siblings[sample(1:2, 1),'idc']
} else { worse_sibling[i] = siblings[2,'idc'] }
}
# Now we are finally ready to exclude siblings
final <- no_twins[no_twins$idc %notin% worse_sibling, ]
after_siblings <- nrow(final)
sub4 <- after_siblings - after_twins
# Flowchart
flowchart <- list(initial_sample, sub1, after_cort, sub2, after_ethn, sub3, after_twins, sub4, after_siblings)
# Flowchart
flowchart <- list(initial_sample, sub1, after_visit, sub2, after_cort, sub3,  after_twins, sub4, after_siblings)
cat(paste("Well, congrats! Your final dataset includes", after_siblings ,"participants.")) # 2877
flowchart
summary(final$maternalAge)
meansd(white$cortisol, splitvar = white$bsiScoreFlg); # white only
summary(white$cortisol)
